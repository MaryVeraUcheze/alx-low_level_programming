!<arch>
0-isupper.c/    0           0     0     644     228       `
#include "main.h"

/**
*_isupper - checks for uppercase character
*@c: the number to be computed
*Return: 1 if uppercase and 0 if not
**/

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
	return (1);
	}
	else
	return (0);
}
0-memset.c/     0           0     0     644     375       `
#include "main.h"
/**
 * _memset - fill a block of memory with a specific value
 * @s: starting address of memory to be filled
 * @b: the desired value
 * @n: number of bytes to be changed
 *
 * Return: changed array with new value for n bytes
 */
char *_memset(char *s, char b, unsigned int n)
{
	int i = 0;

	for (i = 0; n > 0; i++)
	{
		s[i] = b;
		n--;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     334       `
#include "main.h"

/**
 * _strcat - concatenates two strings
 * @dest: input value
 * @src: input value
 * Return: void
 */
char *_strcat(char *dest, char *src)
{
	int i;
	int j;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	j = 0;
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}

	dest[i] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     529       `
#include"main.h"

/**
 *_atoi - converts string to integer
 *@s: string to be converted
 *Return: 0 on success
 */
#include <stdio.h>
#include <limits.h>


int _atoi(char *s)
{
	int sign = 1;
	int result = 0;
	int digit;

	while (*s)
	{
	if (*s == '-')
	{
	sign = -1;
	}
	else if (*s == '+')
	{
	sign = 1;
	}
	else if (*s >= '0' && *s <= '9')
	{
	digit = *s - '0';

	if (result > (INT_MAX - digit) / 10)
	{

	break;
	}

	result = result * 10 + digit;
	}
	else if (result > 0)
	{

	break;
	}

	s++;
	}

	return (result * sign);
}

1-isdigit.c/    0           0     0     644     227       `
#include "main.h"

/**
*_isdigit -  checks for a digit (0 through 9).
*@c: digit to be checked
*Return: 1 on digit and 0 0n otherwise
*/

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
	return (1);
	}
	else
	return (0);
}

1-memcpy.c/     0           0     0     644     364       `
#include "main.h"
/**
 * _memcpy - a function that copies memory area
 * @dest: memory where is stored
 * @src: memory where is copied
 * *@n: number of bytes
 *
 * Return: copied memory with n byted changed
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	int r = 0;
	int i = n;

	for (; r < i; r++)
	{
		dest[r] = src[r];
		n--;
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     400       `
#include "main.h"

/**
 * _strncat - concatenate two strings
 * using at most n bytes from src
 * @dest: input value
 * @src: input value
 * @n: input value
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int i;
	int j;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	j = 0;
	while (j < n && src[j] != '\0')
	{
	dest[i] = src[j];
	i++;
	j++;
	}
	dest[i] = '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     242       `
#include "main.h"
/**
 * _strchr - Entry point
 * @s: input
 * @c: input
 * Return: Always 0 (Success)
 */
char *_strchr(char *s, char c)
{
	int i = 0;

	for (i = 0; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
			return (&s[i]);
	}
	return (0);
}
2-strlen.c/     0           0     0     644     228       `
#include "main.h"

/**
 *_strlen - checks the lenght of a string
 *@s: string to be checked
 *Return: legnth of string
 */

int _strlen(char *s)
{
	int length = 0;

	while (*s != '\0')
	{
	length++;
	s++;
	}
	return (length);
}
2-strncpy.c/    0           0     0     644     327       `
#include "main.h"

/**
 * _strncpy - copy a string
 * @dest: input value
 * @src: input value
 * @n: input value
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int j;

	j = 0;
	while (j < n && src[j] != '\0')
	{
		dest[j] = src[j];
		j++;
	}
	while (j < n)
	{
		dest[j] = '\0';
		j++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     242       `
#include "main.h"

/**
*  _islower - checks for lowercase character
*@v: character to be checked
* Return: 1 for lowercase character or 0 for anything else
*/
int _islower(int v)
{

	if (v >= 97 && v <= 122)
	{
	return (1);
	}
	return (0);
}
3-puts.c/       0           0     0     644     152       `
#include "main.h"
#include <stdio.h>

/**
 * _puts - prints string
 * @str: string
 * return: void
 */

void _puts(char *str)
{
	printf("%s\n", str);
}
3-strcmp.c/     0           0     0     644     302       `
#include "main.h"
/**
 * _strcmp - compare string values
 * @s1: input value
 * @s2: input value
 * Return: s1[i] - s2[i]
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	i = 0;
	while (s1[i] != '\0' && s2[i] != '\0')
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
		i++;
	}
	return (0);
}
3-strspn.c/     0           0     0     644     391       `
#include "main.h"
#include <stdio.h>
/**
 * _strspn - Entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int r;

	while (*s)
	{
		for (r = 0; accept[r]; r++)
		{
			if (*s == accept[r])
			{
				n++;
				break;
			}
			else if (accept[r + 1] == '\0')
				return (n);
		}
		s++;
	}
	return (n);
}


4-isalpha.c/    0           0     0     644     285       `
#include "main.h"

/**
*_isalpha -  a function that checks for alphabetic character.
*@v: character to be checked
* Return: 1 for lowercase character or 0 for anything else
*/
int _isalpha(int v)
{

	if ((v >= 65 && v <= 98) || (v >= 97 && v <= 122))
	{
	return (1);
	}
	return (0);
}

4-strpbrk.c/    0           0     0     644     279       `
#include "main.h"
/**
 * _strpbrk - Entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */
char *_strpbrk(char *s, char *accept)
{
	int k;

	while (*s)
	{
		for (k = 0; accept[k]; k++)
		{
		if (*s == accept[k])
		return (s);
		}
	s++;
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     366       `
#include "main.h"
/**
 * _strstr - Entry point
 * @haystack: input
 * @needle: input
 * Return: Always 0 (Success)
 */
char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *l = haystack;
		char *p = needle;

		while (*l == *p && *p != '\0')
		{
			l++;
			p++;
		}

		if (*p == '\0')
			return (haystack);
	}
	return (0);
}
6-abs.c/        0           0     0     644     255       `
#include "main.h"

/**
*_abs - computes the absolute value of an integer
*@c: The number to be computed
*Return: Absolute value of number or zero
**/

int _abs(int c)
{
	if (c < 0)
	{
	int abs_val;

	abs_val = c * -1;
	return (abs_val);
	}
	return (c);
}

9-strcpy.c/     0           0     0     644     279       `
#include "main.h"

/**
 * _strcpy - copy a string
 * @dest: destination value
 * @src:source value
 * Return: The pointer to dest
 */

char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
	dest[i] = src[i];
	}
	dest[i++] = '\0';
	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

